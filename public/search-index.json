[{"slug":"install-pgaudit","category":"blog","title":"Install pgAudit in your AWS RDS instance","description":"Install and enable pgAudit in AWS RDS instance for logging your Postgres events","tags":["astro"],"body":"\n## Basic setup\n\nFirst we'll have to create an AWS RDS DB for this. We'll use minimal permissions for this setup so that we can easily understand what's going on.\n\n### Step 1: Create Database \n\nCreate your AWS account. Go to AWS RDS tab and click on \"Create Database\"\n\n### Step 2: Select Database\n\nStandard create and postgreSQL\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/db-1.png\">\n\nSelect pg Version to the latest\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/pg-version.png\">\n\nAnd use free tier for now\n\n### Step 3: Add credentials\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/cred.png\">\n\nUsername: postgres\nMasterPassword: postgres\n\nFor now.\n\n### Step 4: Allocate storage\n\nAllocate the minimum possible storage for now\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/storage.png\">\n\n### Step 5: Network\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/vpc-1.png\">\n\nCreate a new VPC for this RDS DB and create new security groups. Make ssure that they allow all traffic for now. Let's improve the security later\n\n### Step 6: Set public access\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/connect.png\">\n\nRemember to set Public access to true since we want to login from psql.\n\n### Step 7: DB Parameter group\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/ad-config-1.png\">\n\nRemember the DB Parameter group name since we need to tweak it later for installing pgAudit\n\n### Step 8: Configure logging\n\nThis is the important part\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/log-exports.png\">\n\nConfigure log exports to Cloudwatch. Create a service linked role with necessary permissions if you haven't. Give it admin access for now.\n\n\nThat's it now click on \"create database\" and wait for the instance to be available\n\n### Step 9: Installing pgAudit\n\nFollow this video for setting up your DB Parameter group, installing pgAudit and enabling it.\n\n[![Everything Is AWESOME](https://img.youtube.com/vi/in-k0Jf2SnU/0.jpg)](https://www.youtube.com/watch?v=in-k0Jf2SnU \"Everything Is AWESOME\")\n\nTo load pgAudit, you need to configure the DB Parameter group to the following:\n\nSet pgaudit.log to `none`, we'll change this later from psql:\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/log.png\">\n\nLoad shared libraries via `shared_preload_libraries`:\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/shared.png\">\n\nSet the pgaudot.role to the `rds_pgaudit`\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/role.png\">\n\n\n\nRestart the instance and you should be able to use pgAudit\n\n\nLog into your RDS using psql using\n\n```sql\npsql postgresql://postgres:password@small-sound.czei94v3hlkf.us-east-2.rds.amazonaws.com:5432/postgres\n\n```\n\nThen create a role for pgAudit\n\n```sql\npostgres=> CREATE ROLE rds_pgaudit; \n```\n\nCheck that the libraries are loaded\n\n```sql\npostgres=> show shared_preload_libraries;\n```\n\nThen enable the extension\n\n```sql\npostgres=> CREATE EXTENSION pgaudit;\n```\n\nEnable logs for pgAudit\n\nFor now, for testing purposes set log level to CREATE\n\n```sql\npostgres=> ALTER DATABASE test_database set pgaudit.log=\"CREATE\"; \n```\n\nBut ideally, it should be\n\n```sql\npostgres=> ALTER DATABASE test_database set pgaudit.log=\"ALL\"; \n```\n\n### Step 10: Testing that pgAudit works\n\nIn the psql shell\n\n```sql\npostgres=> CREATE TABLE test_table (id int);\npostgres=> SELECT * FROM test_table;\n```\n\nGo to logs & events tab \n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/logs-tab.png\">\n\nand check that the logs are reflected by clicking view on the latest written log file\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rds/logs-selection.png\">\n\n\n## Rocketgraph setup\n\nAlternatively you can create a project using Rocketgraph that comes with pgAudit enabled. You just need to do step 9. And once you create extension, you can see all your logs nicely like this:\n\n<img title=\"a title\" alt=\"Alt text\" src=\"../../../public/images/rocketgraph-logs.gif\">\n\nYou can check out the [demo here](https://rocketgraph.io/logger-demo)\n"},{"slug":"introducing-astro","category":"blog","title":"How to build a real-time movie voting system using React.js 🤯","description":"We're excited to announce Astro as a new way to build static websites and deliver lightning-fast performance without sacrificing a modern developer experience.","tags":["astro"],"body":"\n## What we'll be building?\n\nFirst we'll try to build a simple(not so simple actually) movie review app. Where users can vote on movies, write comments and may be add movies too.\n\nThen in the second part we can go deeper by adding a booking system to the movies and have multiple theaters. We'll be using [Rocketgraph](https://rocketgraph.io/) to do this as it provides a complete backend with auth ad db so we don't have to worry about that.\n\nFor this you'll need to define users, movies and a place to store them:\n1. Authentication: You need to store users in a table on say a Postgres DB.\n\n2. Realtime: You need to get realtime comments, and likes from the DB straight to your frontend for the user.\n\n3. A Database: Where you can map users to movies and users and movies to likes.\n\n> 💡To read this article you need to have a basic understanding of React.js\n\n\n## [Rocketgraph](https://rocketgraph.io/) : A complete backend that beats Firebase and is open-source\nA little background. Rocketgraph provides a complete backend. It comes with a Postgres DB, Hasura console to manage your Postgres and add GraphQL layer to your data, Authentication and Serverless functions. \n\nSo to sum it up we provide auth for your web apps, GraphQL for realtime things like messages/notifications/comments etc and Serverless functions for anything you want to offload. Our Serverless Github app auto-compiles your Github code to AWS Lambda functions.\n\n## So what the hack is GraphQL?\nGraphQL is a language specification by Meta to achieve realtime queries on your data by asking for exactly what you need. This is different from traditional API approach where the query is coded into the backend and front-end has very little control over what/how to ask for data.\n\nThink of it like a JSON query. You ask for what data you want inn a json-like query and it will return exactly those fields. \n\nIn this article we'll leverage the power of GraphQL, React Apollo and Hasura to build a real-time system for rating and commenting on movies. We can use this same system to book movie tickets too.\n\n## TLDR Version\n\nIf you just want to see the code. Here is the [code base for this article](https://github.com/RocketsGraphQL/rgraph/tree/master/example-setups/movie-voting). Here you can see [more examples](https://github.com/RocketsGraphQL/rgraph/tree/master/example-setups). This is the [open-source software](https://github.com/RocketsGraphQL/hasura-batteries) behind Rocketgraph\n\nKeep reading\n\n![keep reading gif](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yma0zrp48i934bppq3pc.jpeg)\n\n## Cool, let's start from the basics\nCreate a react project and develop the front-end. Forget about the backend, we'll add it later.\n\n\n```bash\nmkdir movie-voting\ncd movie-voting\n```\n\nNext scaffold a basic react application.\n\n```bash\nnpx create-react-app ./\n```\n\nInstall [react router](https://www.npmjs.com/package/react-router-dom) to be able to navigate between pages. Install react-apollo and graphql for real-time stuff as mentioned above.\n\n```bash\nyarn add react-router-dom\nyarn add @apollo/client graphql\n```\n\nDelete the redundant files such as logo from the project and update the index.js file to as follows:\n\n```javascript\n// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <Routes>\n            <Route path=\"/login\" />\n            <Route path=\"/signup\" />\n            <Route path=\"/\" element={<App />} />\n          </Routes>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\nNow we need to add the App.js and login/signup components. Thats easy.\n\nApp.js\n\n```javascript\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst movies = [\n  {\n    name: 'Snatch',\n    img: 'https://occ-0-3934-3211.1.nflxso.net/dnm/api/v6/E8vDc_W8CLv7-yMQu8KMEC7Rrr8/AAAABVJgO06RKuruJpcyezdM43Ai2ZjvNDmtbnwUXVtvXVhhvpL0tvhr4s9e3j8UojFCLao5a7v8Dg5kti1vFKcA0ldZXWnnC03nBRIt.jpg?r=cbf',\n    likes: 10,\n    state: true,\n  }\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Movies list\n        </p>\n      </header>\n      {\n        movies.map(movie => {\n          return (\n              <div className=\"movie-box\">\n                <div className=\"movie-box-header\">\n                </div>\n                <div className=\"movie-box-body\">\n                  <img alt={movie.name} className=\"movie-image\" src={movie.img} />\n                </div>\n                <div className=\"movie-box-footer\">\n                  {movie.name}\n                  <div className=\"like-button\"><i class=\"fa fa-heart\" style={{\"color\": \"red\"}}aria-hidden=\"true\"></i></div>\n                </div>\n              </div>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\nNow we have the basic home page design. Let's create the login and signup pages.\n\nsignup.js\n\n```javascript\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nexport default function Login(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    navigate(\"/\");\n  }\n\n  return (\n    <div>\n      <h1>Signup</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          placeholder=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button>Signup</button>\n      </form>\n    </div>\n  );\n}\n```\n\nLet's see if that worked\n\n```\nyarn start\n```\n\nCongratulations🥂, you just created the skeleton for the web application. Now we just have to fill in the data, auth and realtime.\n\nEnter [Rocketgraph](https://rocketgraph.io/). How to create a backend with authentication and serverless functions.\n\n\nJust signup and click on create a project in the dashboard:\n\n![create project](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e56z6jzw1xdw18lxo3vi.png)\n\nNext we'll learn about some amazing features that will magically build the backend for you with the power of GraphQL.\n\nOnce your project is up, you get a Hasura console and a Postgres DB as shown below. Please wait for the services to boot up. It might take about 3-5 minutes.\n\n\n## What is Hasura?\n\nHasura is an amazing open-source tool that GraphQLises your postgres database. What it means is that your data is still in the postgres db but you get the powers of GraphQL. It also has an editor which automatically generates GraphQL queries based on your Postgres Tables.\n\n## Back to Rocketgraph\n\nWhen your project is booted up, you get a Hasura link here:\n\n![link to hasura](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4vvwszw74ucjrxicp06.png)\n\nOpen Hasura, and now we ca start creating tables for our Database.\n\nWe need a Movies table as shown below:\n\n![movies table](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ptf6yxtwix1wxebvqlr.png)\n\nWe also need to let the users access it. In Rocketgraph `user` is a role that is authenticated and our JS SDKs send in the JWT with your requests so you don't have to.\n\nGo to the permissions tab on the movies and add the following permissions:\n\nFor insert put permissions as follows:\n\n\n![insert 1](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gga01ng0071izvr4yoe.png)\n\n![insert 2](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/480wrcehyi97rgyj5lbz.png)\n\nAnd for select, it's the same:\n\n![select](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4oxfy4ayexp73k740ci.png)\n\nEnter GraphQL using react-apollo and graphql packages. Apollo makes it easier to query your GraphQL directly from React and provides some powerful functionality like `useSubscription` which we will discuss later.\n\nLet's install them.\n\n```\nyarn add @apollo/client graphql\n```\n\nWe'll also need some custom made JS libraries to get authentication to work.\n\n```\nyarn add @rocketgraphql/react-apollo @rocketgraphql/rocketgraph-js-sdk\n```\n\n\nNow we will add auth to our code using the `RApolloProvider` provided by `@rocketgraphql/react-apollo`\n\nFirst create a folder named `utils` and then create `config.js` inside it with the following content:\n\n```javascript\nimport { createClient } from \"@rocketgraphql/rocketgraph-js-sdk\";\nimport Cookies from 'js-cookie';\n\nconst config = {\n  baseURL: \"https://backend-REPLACE\",\n};\n\nconst { auth } = createClient(config);\n\nexport { auth };\n\n```\n\nReplace the above `https://backend-REPLACE` with the backend url in your Rocketgraph dashboard:\n\n\n![backend url](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awi1dshzvd155ua3dlsj.png)\n\nYou'll find it in the `Auth` section.\n\n\nChange the code in `index.js` to:\n\n```javascript\n// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport Signup from \"./components/login\";\nimport { RApolloProvider } from \"@rocketgraphql/react-apollo\";\nimport { auth } from \"./utils/config\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <RApolloProvider auth={auth} gqlEndpoint=\"https://gqlEndpoint/v1/graphql\">\n        <Router>\n            <Routes>\n              <Route path=\"/login\" element={<Signup />}/>\n              <Route path=\"/signup\" />\n              <Route path=\"/\" element={<App />} />\n            </Routes>\n        </Router>\n      </RApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n```\n\nChange the above `https://gqlEndpoint/v1/graphql` to the graphql endpoint you have here in your Hasura console:\n\n\n![gqlendpoint](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du5j4bl3rmrvph2r5p96.png)\n\nNext we'll add auth.\n\n`login.js`\n\n```javascript\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { auth } from \"../utils/config\";\n\nexport default function Login(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // login\n    try {\n      await auth.signIn({email, password, provider: \"local\"});\n    } catch (error) {\n      alert(\"error logging in\");\n      console.error(error);\n      return;\n    }\n\n    navigate(\"/\");\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          placeholder=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button>Login</button>\n      </form>\n    </div>\n  );\n}\n```\n\n`signup.js`\n\n```javascript\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { auth } from \"../utils/config\";\n\n\nexport default function Login(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // login\n    try {\n      await auth.register({email, password});\n    } catch (error) {\n      alert(\"error logging in\");\n      console.error(error);\n      return;\n    }\n\n    navigate(\"/\");\n  }\n\n  return (\n    <div>\n      <h1>Signup</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          placeholder=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button>Login</button>\n      </form>\n    </div>\n  );\n}\n```\n\nThat's it. Rocketgraph will do the rest. Users will be populated in the user database.\n\n\n![TJ](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlmogzb86hkm40l0xkme.gif)\n\nYou can test this by signing up and checking that the user is created.\n\n## Let's build more features\n\nEnter react-apollo.\n\n`App.js`\n\n```javascript\nimport './App.css';\nimport { gql, useSubscription } from \"@apollo/client\";\n\nconst GET_MOVIES = gql`\n  subscription {\n    movies {\n      id\n      created_at\n      name\n      image\n    }\n  }\n`;\n\nfunction App() {\n  const { data, loading } = useSubscription(GET_MOVIES);\n  if (loading) {\n    return <div>Loading</div>;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Movies list\n        </p>\n      </header>\n      {\n        data && data.movies && data.movies.length ?\n        data.movies.map((movie, index) => {\n          return (\n              <div className=\"movie-box\" key={index}>\n                <div className=\"movie-box-header\">\n                </div>\n                <div className=\"movie-box-body\">\n                  <img alt={movie.name} className=\"movie-image\" src={movie.image} />\n                </div>\n                <div className=\"movie-box-footer\">\n                  {movie.name}\n                  <div className=\"like-button\"><i className=\"fa fa-heart\" style={{\"color\": \"red\"}} aria-hidden=\"true\"></i></div>\n                </div>\n              </div>\n          )\n        }) : \"No movies\"\n      }\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThat's it, just add records in your db and you can see it here in realtime.\n\nAwesome 😎 Now finally let's add the like button\n\n## Important part (User-Id)\n\nFirst create likes table with id, movie_id and user_id as shown below in Hasura\n\n\n![create likes table](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33bzwwrn78zl471yptc5.png)\n\nWe will have to extract this User-Id from the jwt token itself.\nTo do that\n\n\n### Step 1\nCreate a new role named `user` and click on `Insert` to edit it's permissions\n\n![permissions step 1](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbwv3esplq1rtz7bc2p3.png)\n\n### Step 2\nAllow user role to modify all. Check these boxes\n\n\n![modify](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53o1ly3uc47u0kajpvi6.png)\n\n### Step 3 - most important\nSet the user-id automatically\n\nClick on column presets and select user-id. Set from X-Hasura-user-id.\n\n\n![session](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn6peijcpotb16m5tsqf.png)\n\nAnd click save. Now we have prepared our table to hold the likes/votes\n\n\n## Enter Aggregations (Likes)\n\n\nCreate a new file in `components` named\n`likeCount.js`\n\n```javascript\nimport React, { useState } from \"react\";\nimport { gql, useSubscription, useMutation } from \"@apollo/client\";\n\nconst likes = (movie_id) => gql`\n  subscription {\n    likes(where: {movie_id: {_eq: \"${movie_id}\"}}) {\n        id\n        user_id\n    }\n  }\n`;\n\nconst LIKE = gql`\n  mutation like($movie_id: uuid!) {\n    insert_likes(objects: {movie_id: $movie_id}) {\n        affected_rows\n    }\n  }\n`;\n\nconst UNLIKE = gql`\n    mutation unlike($movie_id: uuid!) {\n        delete_likes(where: {movie_id: {_eq: $movie_id}}) {\n            affected_rows\n        }\n    }\n`;\n\nfunction Component({movie}) {\n  const LIKE_COUNT = likes(movie.id);\n  const [addLike, { like_data, like_loading, error }] = useMutation(LIKE);\n  const [unLike, _] = useMutation(UNLIKE);\n\n  const [isRed, setIsRed] = useState(false);\n  const { data, loading } = useSubscription(LIKE_COUNT);\n  console.log(data, movie);\n  if (loading) {\n    return <div>Loading</div>;\n  }\n  const likeThis = () => {\n    setIsRed(!isRed);\n    if (isRed) {\n        unLike({variables: {movie_id: movie.id}});\n    } else {\n        addLike({ variables: { movie_id: movie.id }});\n    }\n  }\n  return (\n    <span>\n        {data.likes.length}\n        <i className=\"fa fa-heart\" style={{\"color\": isRed ? \"red\" : \"gray\"}} aria-hidden=\"true\" onClick={likeThis}></i>\n    </span>\n  );\n}\n\nexport default Component;\n\n```\n\nOh wait! That would delete all likes in the table. So let's secure our table by:\n\n\n![delete permission](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cyfvrl2dopsn3wbrswi.png)\n\nAnd import this into `App.js` like this:\n\n```javascript\nimport './App.css';\nimport { gql, useSubscription } from \"@apollo/client\";\nimport LikeCountComponent from \"./components/likeCount\";\n\nconst GET_MOVIES = gql`\n  subscription {\n    movies {\n      id\n      created_at\n      name\n      image\n    }\n  }\n`;\n\n\n\nfunction App() {\n  const { data, loading } = useSubscription(GET_MOVIES);\n  if (loading) {\n    return <div>Loading</div>;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Movies list\n        </p>\n      </header>\n      {\n        data && data.movies && data.movies.length ?\n        data.movies.map((movie, index) => {\n          return (\n              <div className=\"movie-box\" key={index}>\n                <div className=\"movie-box-header\">\n                </div>\n                <div className=\"movie-box-body\">\n                  <img alt={movie.name} className=\"movie-image\" src={movie.image} />\n                </div>\n                <div className=\"movie-box-footer\">\n                  {movie.name}\n                  <div className=\"like-button\"><LikeCountComponent movie={movie} /></div>\n                </div>\n              </div>\n          )\n        }) : \"No movies\"\n      }\n    </div>\n  );\n}\n\nexport default App;\n```\n\n\nThat's a wrap! Congrats, you just made a movie voting app.\n\n\n![bye gif](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp70xycptv3i68t03ybr.gif)\n"},{"slug":"messaging-app","category":"blog","title":"How to build a messaging application in React 🤯","description":"Build production grade messaging application using React + Chakra UI + Rocketgraph","tags":["astro"],"body":"\n## Basic setup\n\n1. We'll use React.js + ChakraUI for basic UI setup\n2. Rocketgraph to setup the backend\n\n```\nnpx create-react-app messaging-app\n```\n\nInstall Chakra UI\n\n```\nyarn add @chakra-ui/react @emotion/react @emotion/styled framer-motion\n```\n\nInstall other necessary libs\n\n```\nyarn add react-router-dom\n```\n\nHead over to [rocketgraph](https://rocketgraph.io) and create an account. Then click on \"Create Project\". Don't worry, it comes with a free trail and no CC required.\n\nWait for the project to boot and go to the Hasura console.\n\n## Skeleton App\n\nNow let's build the basic UI without the actual data/backend.\n\ncreate `src/components` directory to hold our components.\n\nIn the `index.js` file, replace it with the following\n\n```js\n// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport Message from \"./components/Message\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Router>\n        <Routes>\n          <Route path=\"/login\" />\n          <Route path=\"/signup\" />\n          <Route path=\"/messages\" element={<Message />} />\n          <Route path=\"/\" element={<App />} />\n        </Routes>\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\nNow let's create the individual components to show on the app.\n\nCreate `src/components/Message.js` and add the following code.\n\n```js\nimport React from \"react\";\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Input } from '@chakra-ui/react'\nimport { Button, ButtonGroup } from '@chakra-ui/react'\nimport { Card, CardHeader, CardBody, CardFooter, Heading, Text, Flex, Avatar, Box } from '@chakra-ui/react'\n\n\nconst messages = [\n    {\n        from: \"\",\n        to: \"\",\n        from_address: \"\",\n        to_address: \"\",\n        message: \"View a summary of all your customers over the last month.\",\n    },\n    {\n        from: \"\",\n        to: \"\",\n        from_address: \"\",\n        to_address: \"\",\n        message: \"View a summary of all your customers over the last month.\",\n    }\n]\n\nexport default function DrawerExample() {\n    const [searchParams] = useSearchParams();\n    console.log(searchParams.get('email')); // ▶ URLSearchParams {}\n    // currentUser = Cookies.get(\"user\")\n    const currentUser = \"kaushik@moneysave.io\"\n    return (\n      <>\n        <div className=\"message-body\">\n            <div className=\"messages\">\n                {\n                    messages.map((message) => {\n                        return (\n                            <div className={message.to == currentUser ? \"message-received\" : \"message-sent\"} m={4}>\n                                <div className=\"message-text\">\n                                    <Card>\n                                        <CardHeader>\n                                            <Flex spacing='4'>\n                                            <Flex flex='1' gap='4' alignItems='center' flexWrap='wrap'>\n                                                <Avatar name='Segun Adebayo' src='https://bit.ly/sage-adebayo' />\n            \n                                                <Box>\n                                                <Heading size='sm'>Segun Adebayo</Heading>\n                                                <Text>Creator, Chakra UI</Text>\n                                                </Box>\n                                            </Flex>\n                                            </Flex>\n                                        </CardHeader>\n                                        <CardBody>\n                                            <Text>{message.message}</Text>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n\n\n            </div>\n            <div className=\"main-bottom\">\n                <Input m={2} placeholder='Basic usage' />\n                <Button m={2} colorScheme='blue'>Button</Button>\n            </div>\n        </div>\n      </>\n    )\n}\n```\n\nHere we have created a dummy message component which displays the chat with a user based on the query parameters in the URL. We will discuss this later.\nOnce we implement the actual functionality, the messages will become live\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfoqsfavr6a47dz02o0t.gif)\n\nAnd in `App.css` add the following code:\n\n\n```css\n.App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n.message-body {\n  position: relative;\n  height: 100vh;\n}\n.main-bottom {\n  position: absolute;\n  bottom: 10px;\n  left: 0px;\n  width: 100%;\n  display: flex;\n}\n\n.message-sent {\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n.message-received {\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.message-text {\n\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\nIn `App.js`, add the following code\n\n```js\nimport logo from './logo.svg';\nimport Profiles from \"./components/Profiles\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profiles/>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nNow create `src/components/Profiles.js`\n\n```js\nimport {\n    Heading,\n    Avatar,\n    Box,\n    Center,\n    Image,\n    Flex,\n    Text,\n    Stack,\n    Button,\n    useColorModeValue,\n  } from '@chakra-ui/react';\n  \n  export default function SocialProfileWithImage() {\n    return (\n      <Center py={6}>\n        <Box\n          maxW={'270px'}\n          w={'full'}\n          bg={useColorModeValue('white', 'gray.800')}\n          boxShadow={'2xl'}\n          rounded={'md'}\n          overflow={'hidden'}>\n          <Image\n            h={'120px'}\n            w={'full'}\n            src={\n              'https://images.unsplash.com/photo-1612865547334-09cb8cb455da?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80'\n            }\n            objectFit={'cover'}\n          />\n          <Flex justify={'center'} mt={-12}>\n            <Avatar\n              size={'xl'}\n              src={\n                'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&ixid=eyJhcHBfaWQiOjE3Nzg0fQ'\n              }\n              alt={'Author'}\n              css={{\n                border: '2px solid white',\n              }}\n            />\n          </Flex>\n  \n          <Box p={6}>\n            <Stack spacing={0} align={'center'} mb={5}>\n              <Heading fontSize={'2xl'} fontWeight={500} fontFamily={'body'}>\n                John Doe\n              </Heading>\n              <Text color={'gray.500'}>Frontend Developer</Text>\n            </Stack>\n  \n            <Button\n              w={'full'}\n              mt={8}\n              bg={useColorModeValue('#151f21', 'gray.900')}\n              color={'white'}\n              rounded={'md'}\n              onClick={() => {window.location = \"/messages?email=kaushik@moneysave.io\"} }\n              _hover={{\n                transform: 'translateY(-2px)',\n                boxShadow: 'lg',\n              }}>\n              Message\n            </Button>\n          </Box>\n        </Box>\n      </Center>\n    );\n  }\n```\n\nNow let's create the login and signup pages as follows:\n\n`src/components/login.js`\n\n```js\nimport {\n    Flex,\n    Box,\n    FormControl,\n    FormLabel,\n    Input,\n    Checkbox,\n    Stack,\n    Link,\n    Button,\n    Heading,\n    Text,\n    useColorModeValue,\n  } from '@chakra-ui/react';\n  \n  export default function SimpleCard() {\n    return (\n      <Flex\n        minH={'100vh'}\n        align={'center'}\n        justify={'center'}\n        bg={useColorModeValue('gray.50', 'gray.800')}>\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Sign in to your account</Heading>\n            <Text fontSize={'lg'} color={'gray.600'}>\n              to enjoy all of our cool <Link color={'blue.400'}>features</Link> ✌️\n            </Text>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n            <Stack spacing={4}>\n              <FormControl id=\"email\">\n                <FormLabel>Email address</FormLabel>\n                <Input type=\"email\" />\n              </FormControl>\n              <FormControl id=\"password\">\n                <FormLabel>Password</FormLabel>\n                <Input type=\"password\" />\n              </FormControl>\n              <Stack spacing={10}>\n                <Stack\n                  direction={{ base: 'column', sm: 'row' }}\n                  align={'start'}\n                  justify={'space-between'}>\n                  <Checkbox>Remember me</Checkbox>\n                  <Link color={'blue.400'}>Forgot password?</Link>\n                </Stack>\n                <Button\n                  bg={'blue.400'}\n                  color={'white'}\n                  _hover={{\n                    bg: 'blue.500',\n                  }}>\n                  Sign in\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Stack>\n      </Flex>\n    );\n  }\n```\n\n`src/components/signup.js`\n\n```js\nimport {\n    Flex,\n    Box,\n    FormControl,\n    FormLabel,\n    Input,\n    Checkbox,\n    Stack,\n    Link,\n    Button,\n    Heading,\n    Text,\n    useColorModeValue,\n  } from '@chakra-ui/react';\n  \n  export default function SimpleCard() {\n    return (\n      <Flex\n        minH={'100vh'}\n        align={'center'}\n        justify={'center'}\n        bg={useColorModeValue('gray.50', 'gray.800')}>\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Create your account</Heading>\n            <Text fontSize={'lg'} color={'gray.600'}>\n              to enjoy all of our cool <Link color={'blue.400'}>features</Link> ✌️\n            </Text>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n            <Stack spacing={4}>\n              <FormControl id=\"email\">\n                <FormLabel>Email address</FormLabel>\n                <Input type=\"email\" />\n              </FormControl>\n              <FormControl id=\"password\">\n                <FormLabel>Password</FormLabel>\n                <Input type=\"password\" />\n              </FormControl>\n              <Stack spacing={10}>\n                <Stack\n                  direction={{ base: 'column', sm: 'row' }}\n                  align={'start'}\n                  justify={'space-between'}>\n                  <Checkbox>Remember me</Checkbox>\n                  <Link color={'blue.400'}>Forgot password?</Link>\n                </Stack>\n                <Button\n                  bg={'blue.400'}\n                  color={'white'}\n                  _hover={{\n                    bg: 'blue.500',\n                  }}>\n                  Sign in\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Stack>\n      </Flex>\n    );\n  }\n```\n\nGreat, now we finished setting up the skeleton of the front-end of the application. Now we need to inject data into this via the backend. Let's create the backend. Head over to the next article in the series.\n\n\n## Backend on Rocketgraph\n\nHead over to the Hasura console. You can find it here on the 2nd tab in Rocketgraph:\n\n\n![Rocketgraph Hasura tab](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goy9dm9ocp1hn96g95r6.png)\n\nuse the password to login to the console. And head over to the data column and create the following columns:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4omj74k9osp3cdif02t.png)\n\n## Permissions\n\nWe have to add user permissions so that the users can view only their messages.\n\nHead over to the permissions tab in messages and create a role called user. A user is a person's role who is logged in.\n\nCreate insert permissions as follows:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cceoweng7syfs6ckraug.png)\n\nNotice the column presets. WE are letting Hasura to inject custom variables automatically into our columns, so we can use them later.\n\nNext allow select over the messages as follows:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yx6gg4qu7vjqix26w3x9.png)\n\nWe are telling Hasura to only allow messages to the user if he is the sender or receiver of the message.\n\nAnd save:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjt1pq92eqnrr2rf4ahd.png)\n\n## Enter GQL\n\nSo to fetch the data from our backend we'll be using GraphQL. So let's install the necessary libraries.\n\n```bash\nyarn add @apollo/client\nyarn add @rocketgraphql/rocketgraph-js-sdk\nyarn add @rocketgraphql/react-apollo \n```\n\nNow modify the Signup.js page to be able to register new users:\n\n```js\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { auth } from \"../utils/config\";\n\nimport {\n    Flex,\n    Box,\n    FormControl,\n    FormLabel,\n    Input,\n    Checkbox,\n    Stack,\n    Link,\n    Button,\n    Heading,\n    Text,\n    useColorModeValue,\n  } from '@chakra-ui/react';\n  \n  export default function SimpleCard() {\n    const [ email, setEmail ] = useState()\n    const [ password, setPassword ] = useState()\n    const navigate = useNavigate();\n\n    const signup = async () => {\n      // login\n      try {\n        await auth.register({email, password});\n        navigate(\"/\")\n      } catch (error) {\n        alert(\"error signing up\");\n        console.error(error);\n        return;\n      }\n    }\n    return (\n      <Flex\n        minH={'100vh'}\n        align={'center'}\n        justify={'center'}\n        bg={useColorModeValue('gray.50', 'gray.800')}>\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Create your account</Heading>\n            <Text fontSize={'lg'} color={'gray.600'}>\n              to enjoy all of our cool <Link color={'blue.400'}>features</Link> ✌️\n            </Text>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n            <Stack spacing={4}>\n              <FormControl id=\"email\">\n                <FormLabel>Email address</FormLabel>\n                <Input type=\"email\" onChange={(e) => setEmail(e.target.value)}/>\n              </FormControl>\n              <FormControl id=\"password\">\n                <FormLabel>Password</FormLabel>\n                <Input type=\"password\" onChange={(e) => setPassword(e.target.value)}/>\n              </FormControl>\n              <Stack spacing={10}>\n                <Stack\n                  direction={{ base: 'column', sm: 'row' }}\n                  align={'start'}\n                  justify={'space-between'}>\n                  <Checkbox>Remember me</Checkbox>\n                  <Link color={'blue.400'}>Forgot password?</Link>\n                </Stack>\n                <Button\n                  onClick={() => signup()}\n                  bg={'blue.400'}\n                  color={'white'}\n                  _hover={{\n                    bg: 'blue.500',\n                  }}>\n                  Sign up\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Stack>\n      </Flex>\n    );\n  }\n```\n\nNotice that we are using the Rocketgraph's `auth.register()` method. This will take care of handling the signup and setting the user cookies for us.\n\nAnd similarly for the login:\n\n```js\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { auth } from \"../utils/config\";\n\nimport {\n    Flex,\n    Box,\n    FormControl,\n    FormLabel,\n    Input,\n    Checkbox,\n    Stack,\n    Link,\n    Button,\n    Heading,\n    Text,\n    useColorModeValue,\n  } from '@chakra-ui/react';\n  \n  export default function SimpleCard() {\n    const [ email, setEmail ] = useState()\n    const [ password, setPassword ] = useState()\n    const navigate = useNavigate();\n\n    const signup = async () => {\n      // login\n      try {\n        await auth.signIn({email, password, provider: \"local\"});\n        navigate(\"/\")\n      } catch (error) {\n        alert(\"error signing up\");\n        console.error(error);\n        return;\n      }\n    }\n    return (\n      <Flex\n        minH={'100vh'}\n        align={'center'}\n        justify={'center'}\n        bg={useColorModeValue('gray.50', 'gray.800')}>\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Login to your account</Heading>\n            <Text fontSize={'lg'} color={'gray.600'}>\n              to enjoy all of our cool <Link color={'blue.400'}>features</Link> ✌️\n            </Text>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n            <Stack spacing={4}>\n              <FormControl id=\"email\">\n                <FormLabel>Email address</FormLabel>\n                <Input type=\"email\" onChange={(e) => setEmail(e.target.value)}/>\n              </FormControl>\n              <FormControl id=\"password\">\n                <FormLabel>Password</FormLabel>\n                <Input type=\"password\" onChange={(e) => setPassword(e.target.value)}/>\n              </FormControl>\n              <Stack spacing={10}>\n                <Stack\n                  direction={{ base: 'column', sm: 'row' }}\n                  align={'start'}\n                  justify={'space-between'}>\n                  <Checkbox>Remember me</Checkbox>\n                  <Link color={'blue.400'}>Forgot password?</Link>\n                </Stack>\n                <Button\n                  onClick={() => signup()}\n                  bg={'blue.400'}\n                  color={'white'}\n                  _hover={{\n                    bg: 'blue.500',\n                  }}>\n                  Sign up\n                </Button>\n              </Stack>\n            </Stack>\n          </Box>\n        </Stack>\n      </Flex>\n    );\n  }\n```\n\nNow test that you are able to retrieve the users list via the following code in App.js:\n\n```js\nimport logo from './logo.svg';\nimport Profiles from \"./components/Profiles\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profiles/>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nAnd create a component named `Profiles.js` in `/components`:\n\n```js\nimport {\n    Heading,\n    Avatar,\n    Box,\n    Center,\n    Image,\n    Flex,\n    Text,\n    Stack,\n    Button,\n    useColorModeValue,\n    useRangeSlider,\n  } from '@chakra-ui/react';\n  import { gql, useQuery, useMutation, useSubscription } from \"@apollo/client\";\n\n  const GET_TODOS = gql`\n    subscription {\n      users {\n        id\n        email\n      }\n    }\n  `;\n\n  export default function SocialProfileWithImage() {\n    const { data, loading } = useSubscription(GET_TODOS);\n    const bgColor800 = useColorModeValue('white', 'gray.800');\n    const bgColor900 = useColorModeValue('#151f21', 'gray.900');\n    const users = data?.users;\n    return (\n      <Center py={6}>\n        {\n          users && users.map((user) => {\n            return (\n              <Box\n              maxW={'270px'}\n              w={'full'}\n              bg={bgColor800}\n              boxShadow={'2xl'}\n              rounded={'md'}\n              overflow={'hidden'}>\n              <Image\n                h={'120px'}\n                w={'full'}\n                src={\n                  'https://images.unsplash.com/photo-1612865547334-09cb8cb455da?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80'\n                }\n                objectFit={'cover'}\n              />\n              <Flex justify={'center'} mt={-12}>\n                <Avatar\n                  size={'xl'}\n                  src={\n                    'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&ixid=eyJhcHBfaWQiOjE3Nzg0fQ'\n                  }\n                  alt={'Author'}\n                  css={{\n                    border: '2px solid white',\n                  }}\n                />\n              </Flex>\n      \n              <Box p={6}>\n                <Stack spacing={0} align={'center'} mb={5}>\n                  <Heading fontSize={'2xl'} fontWeight={500} fontFamily={'body'}>\n                    {user.email}\n                  </Heading>\n                  <Text color={'gray.500'}>Frontend Developer</Text>\n                </Stack>\n      \n                <Button\n                  w={'full'}\n                  mt={8}\n                  bg={bgColor900}\n                  color={'white'}\n                  rounded={'md'}\n                  onClick={() => {window.location = `/messages?email=${user.email}`} }\n                  _hover={{\n                    transform: 'translateY(-2px)',\n                    boxShadow: 'lg',\n                  }}>\n                  Message\n                </Button>\n              </Box>\n            </Box>\n            )\n          })\n        }\n\n      </Center>\n    );\n  }\n```\n\n## Postgres Triggers\n\nSO what are Postgres triggers and why are they so great. To be honest I also didn't know about them until I wrote this application. And realising just how powerful they are made me rethink my view on web-development.\n\nBasically Postgres triggers are functions that are triggered when an event(CREATE, READ, UPDATE, DELETE) happens. You can do powerful joins and interpolations using these triggers. They are completely on the backend and you can use them to set restrictions on the data.\n\nSo let's say you want to embed to_id field automatically into every message. to_id is the id of the user the message is addressed to. Since this is not available on the frontend, we will do it from the backend.\n\nGo to the SQL tab in your Hasura console:\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24r6nwoc6w1ayca1zsws.png)\n\nAnd add the following code:\n\n```SQL\nCREATE FUNCTION create_to_id()\n    RETURNS trigger AS $BODY$\n    BEGIN\n    SELECT id INTO NEW.to_id FROM users WHERE email = NEW.to_email;\n    RETURN NEW;\n    END;\n    $BODY$ LANGUAGE plpgsql;\n\nCREATE TRIGGER insert_id BEFORE INSERT OR UPDATE ON messages FOR EACH ROW EXECUTE PROCEDURE create_to_id();\n```\n\nWe are telling SQL to get the id from email and insert that into the new record `before` inserting the record. This way we get the to id information in the table for using later.\n\nNow modify the code in `Message.js` component to the following:\n\n```js\nimport React, {useEffect, useState} from \"react\";\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Input } from '@chakra-ui/react'\nimport { Button, ButtonGroup } from '@chakra-ui/react'\nimport { Card, CardHeader, CardBody, CardFooter, Heading, Text, Flex, Avatar, Box } from '@chakra-ui/react'\nimport { gql, useQuery, useMutation, useSubscription } from \"@apollo/client\";\n\n\nconst ADD_MESSAGE = gql`\n    mutation MyMutation($message: String!, $from_email: String!, $to_email: String!) {\n        insert_messages_one(object: {from_email: $from_email, message: $message, to_email: $to_email}) {\n            from_email\n            message\n            to_id\n            to_email\n        }\n    }\n`;\n\nconst GET_MESSAGES = gql`\n    subscription MySubscription {\n        messages {\n            id\n            message\n            from_email\n            to_email\n        }\n    }\n`;\n\n// CREATE FUNCTION check_author_active()\n//     RETURNS trigger AS $BODY$\n//     BEGIN\n//     SELECT id INTO NEW.to_id FROM users WHERE email = NEW.to_email;\n//     RETURN NEW;\n//     END;\n//     $BODY$ LANGUAGE plpgsql;\n\n// CREATE TRIGGER insert_article BEFORE INSERT OR UPDATE ON messages FOR EACH ROW EXECUTE PROCEDURE check_author_active();\n\n\nexport default function DrawerExample() {\n    const [searchParams] = useSearchParams();\n    const [messages, setMessages] = useState([]);\n    console.log(searchParams.get('email')); // ▶ URLSearchParams {}\n    const currentUser = \"kaushik@moneysave.io\";\n    const { data, loading } = useSubscription(GET_MESSAGES);\n    console.log(\"messages: \", data, loading);\n    const [addMessage, { messages_mutate, message_loading }] = useMutation(ADD_MESSAGE);\n    const senderAddress = searchParams.get('email');\n    const [message, setMessage] = useState(\"\");\n    const sendMessage = (text, from_email, to_email) => {\n        addMessage({ variables: { message: text, from_email: from_email, to_email: to_email } });\n    }\n    useEffect(() => {\n        if (data && data.messages.length) {\n            setMessages(data?.messages);\n        }\n    }, [data])\n    return (\n      <>\n        <div className=\"message-body\">\n            <div className=\"messages\">\n                {\n                    messages.map((message) => {\n                        return (\n                            <div key={message.id} className={message.to_email == currentUser ? \"message-received\" : \"message-sent\"} m={4}>\n                                <div className=\"message-text\">\n                                    <Card>\n                                        <CardHeader>\n                                            <Flex spacing='4'>\n                                            <Flex flex='1' gap='4' alignItems='center' flexWrap='wrap'>\n                                                <Avatar name='Segun Adebayo' src='https://bit.ly/sage-adebayo' />\n            \n                                                <Box>\n                                                <Heading size='sm'>{message.from_email}</Heading>\n                                                <Text>Creator, Chakra UI</Text>\n                                                </Box>\n                                            </Flex>\n                                            </Flex>\n                                        </CardHeader>\n                                        <CardBody>\n                                            <Text>{message.message}</Text>\n                                        </CardBody>\n                                    </Card>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n\n\n            </div>\n            <div className=\"main-bottom\">\n                <Input m={2} placeholder='Basic usage' onChange={(e) => {setMessage(e.target.value)}}/>\n                <Button m={2} colorScheme='blue' onClick={() => {sendMessage(message, \"kaushik@rocketgraph.io\", \"kaushik\");}}>Button</Button>\n            </div>\n        </div>\n      </>\n    )\n}\n```\n\nYou should be able to send messages and receive on this component.\n\nBe sure to check out [Rocketgraph](https://rocketgraph.io/)\n\n"},{"slug":"pokemon-app","category":"blog","title":"How to build a pokemon collectibles application in React 🤯","description":"Build production grade pokemon collectibles application using React + Rocketgraph","tags":["astro"],"body":"\n## What we'll be building?\n\nWe'll be building a Pokemon collectibles app. You can have users signup and a database of Pokemon to choose from. After a user collects a Pokemon, it's his. It's first come first serve.\n\nFor this, we'll need\n\n- Authentication for users\n- DB to store, users and Pokemon\n- Pokemon data\n- A mapping or a foreign key to track which Pokemon belongs to who\n- Realtime notification system for tracking Pokemon collection\n- Front-end in React.js\n\nLuckily we have [Rocketgraph](https://rocketgraph.io) which provides this functionality right out of the box. Let's leverage that to build this much faster.\n\n> 💡To read this article you need to have a basic understanding of React.js and PostgreSQL\n\n## [Rocketgraph](https://rocketgraph.io) : A complete backend that beats Firebase and is open-source\n\nA little background. Rocketgraph provides a complete backend. It comes with a Postgres DB, Hasura console to manage your Postgres and add GraphQL layer to your data, Authentication and Serverless functions.\n\nSo to sum it up we provide auth for your web apps, GraphQL for realtime things like messages/notifications/comments etc and Serverless functions for anything you want to offload. Deploy your serverless functions by running `rgraph deploy <project name>` in your repo.\n\n## So what the hack is GraphQL?\n\nGraphQL is a language specification by Meta to achieve realtime queries on your data by asking for exactly what you need. This is different from traditional API approach where the query is coded into the backend and front-end has very little control over what/how to ask for data.\n\nThink of it like a JSON query. You ask for what data you want inn a json-like query and it will return exactly those fields.\n\nIn this article we'll leverage the power of GraphQL, React Apollo and Hasura to build a real-time system for rating and commenting on movies. We can use this same system to book movie tickets too.\n\n## TLDR Version\n\nIf you just want to see the code. Here is the [code base for this article](https://github.com/RocketsGraphQL/rgraph/tree/master/example-setups/movie-voting). Here you can see [more examples](https://github.com/RocketsGraphQL/rgraph/tree/master/example-setups). This is the [open-source software](https://github.com/RocketsGraphQL/hasura-batteries) behind Rocketgraph\n\nKeep reading\n\n![keep reading gif](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yma0zrp48i934bppq3pc.jpeg)\n\n## Before you start\n\nSignup on [Rocketgraph](https://rocketgraph.io/signup) and create a project. This will also spin up an AWS RDS Postgres DB that we'll use to store our pokemon data. Once it's complete,\n\n## Cool, let's start from the basics\nCreate a react project and develop the front-end. Forget about the backend, we'll add it later.\n\n\n```bash\nmkdir pokemon-app && cd pokemon-app\n```\n\nNext scaffold a basic react application.\n\n```bash\nnpx create-react-app ./\n```\n\nInstall [react router](https://www.npmjs.com/package/react-router-dom) to be able to navigate between pages. Install react-apollo and graphql for real-time stuff as mentioned above.\n\n```bash\nyarn add react-router-dom\nyarn add @apollo/client graphql\n```\n\nNext add some Rocketgraph libraries\n\n```\nyarn add @rocketgraphql/react-apollo\nyarn add @rocketgraphql/rocketgraph-js-sdk\n```\n\nDelete the redundant files such as logo from the project and update the index.js file to as follows:\n\n```js\n// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Login } from \"./components/login\";\nimport { Signup } from \"./components/signup\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport { RApolloProvider } from \"@rocketgraphql/react-apollo\";\nimport { auth } from \"./utils/rockets\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <RApolloProvider auth={auth} gqlEndpoint=\"https://hasura-vlklxvo.rocketgraph.app/v1/graphql\">\n        <Router>\n          <Routes>\n            <Route path=\"/login\" element={<Login />}/>\n            <Route path=\"/signup\" element={<Signup />}/>\n            <Route path=\"/\" element={<App />} />\n          </Routes>\n        </Router>\n      </RApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n```\n\nAnd replace your `gqlEndpoint` value with that on your Hasura console here:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftu33ce9oc7m4ar2fkcn.png)\n\nApp.js\n\n```js\nimport './App.css';\n\nimport { gql, useMutation, useSubscription } from \"@apollo/client\";\n\n\nconst GET_TODOS = gql`\n  subscription {\n    pokemon(limit: 100, order_by: {id: asc}) {\n      id\n      identifier\n      user_id\n    }\n  }\n`;\n\nconst COLLECT = gql`\n  mutation MyMutation($name: String!) {\n    update_pokemon(where: {identifier: {_eq: $name}}, _set: {identifier: $name}) {\n      affected_rows\n    }\n  }\n`\n\nconst PokemonComponent = (poke, func) => {\n  return (\n    <>\n      <li key={poke.id}>{poke.identifier}\n        {\n          poke.user_id ?\n          \" collected\"\n          : <button onClick={() => {console.log(poke); func(poke.identifier)}}>collect</button>\n        }\n      </li>\n    </>\n  )\n}\nfunction App() {\n  const { data, loading } = useSubscription(GET_TODOS);\n  console.log(\"data, loading\", data, loading);\n  const [collectPoke, { poke_mutate, poke_loading }] = useMutation(COLLECT);\n  const collectPokemon = (poke_name) => {\n    collectPoke({ variables: { name: poke_name} });\n}\n  return (\n    <div className=\"App\">\n        {!data || !data.pokemon || !data.pokemon.length ? (\n          \"no data\"\n        ) : (\n          <ul id=\"todosList\">\n            {data.pokemon.map((poke) => {\n              return PokemonComponent(poke, collectPokemon);\n            })}\n          </ul>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n```\n\ncomponents/signup:\n\n```js\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { auth } from \"../utils/rockets\";\n\nexport function Signup(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // login\n    try {\n        await auth.register({email, password});\n        navigate(\"/\")\n      } catch (error) {\n        alert(\"error signing up\");\n        console.error(error);\n        return;\n    }\n\n  }\n\n  return (\n    <div>\n      <h1>Signup</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          id=\"inputUserEmail\"\n          type=\"email\"\n          placeholder=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          id=\"inputUserPassword\"\n          type=\"password\"\n          placeholder=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button id=\"signupButton\">Signup</button>\n      </form>\n    </div>\n  );\n}\n```\n\n## Load the Pokemon data\n\nLet's load the Pokemon data from the open-source db. We'll need a small standalone Python project for that.\n\nCreate a folder called `pokemon-python` and a file named `load_pokemon.py`:\n\n```py\nimport pandas as pd\nfrom sqlalchemy import create_engine\nengine = create_engine('postgresql://postgres:password@xxxxx.xxxxx.us-east-2.rds.amazonaws.com:5432/postgres')\ndf=pd.read_csv('https://raw.githubusercontent.com/veekun/pokedex/master/pokedex/data/csv/pokemon.csv')\ndf.to_sql('pokemon', engine)\n```\n\n```bash\ncd pokemon-python\n```\n\n```bash\n# create a venv\npip install virtualenv\npython3 -m venv env\n```\n\n```bash\n# To activate\nsource env/bin/activate\n```\n\nFor an easier and robust deployment of Postgres instances, checkout [Rocketgraph](https://rocketgraph.io/)\n\n```bash\npip3 install pandas\npip3 install sqlalchemy\n```\n\nAnd for good measure\n\n```bash\npip3 freeze > requirements.txt\n```\n\nNow simply run\n\n```bash\npython3 load_pokemon.py\n```\n\nif you get an error such as\n\n> ModuleNotFoundError: No module named 'psycopg2'\n\nsimply install it:\n\n```\npip install psycopg2-binary\n```\n\nOnce you run that command, `psql` into your PostgresDB to ensure that Pokemon data is loaded:\n\n```bash\npsql postgresql://postgres:password@restless-pine.xxxxxxxxxxx.us-east-2.rds.amazonaws.com:5432/postgres\n```\n\nAnd:\n\n```\nSELECT * FROM pokemon LIMIT 10;\n```\n\nYou should see a few Pokemon there. Congrats, you loaded the Pokemon data and setup a front-end succesfully.\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us19o6uv240x2yl1ez7l.png)\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7spmvhovql1cjhyb25n.png)\n\nNow, go to public and click on track\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ydq9k98l2r8xwxiwtdm.png)\n\n\n\n## Now the permissions\n\nOpen the Hasura console from your Rocketgraph Hasura tab. We set permissions here so we know which pokemon belongs to whom. Create a role `user` with the following permissions on the permissions tab.\n\nFor select:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a706cne34u85lcl1s41h.png)\n\nDo without any checks\n\nFor update:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz7cf8gmfcma4j3mra3q.png)\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh6jpxgtyqik6fsd8mma.png)\n\nWe also need to preset column user_id so that it automatically sets it up from our rocketgraph-js-sdk:\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otjhacmrcqfsvwhvm502.png)\n\n\n## Aaaand, we are done!!\n\nYou can host your app on Vercel, use tailwind to make it look more professional.\n"}]